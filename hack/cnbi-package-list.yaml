---
apiVersion: tekton.dev/v1beta1
kind: Pipeline
metadata:
  name: cnbi-package-list
  annotations:
    meteor.zone/pipeline: "true"
    shower.meteor.zone/button-label: Run code in JupyterHub
spec:
  description: Build a notebook image from a package list
  params:
    - name: cnbi-package-list-name
      type: string

  workspaces:
    - name: packages-to-install

  tasks:
    - name: resolve-dependencies
      workspaces:
        - name: pinned-packages
          workspace: packages-to-install
      taskRef:
        name: get-package-versions-list
      params:
        - name: CNBI_PACKAGE_LIST
          value: $(params.cnbi-package-list-name)
    ####### TODO: the rest of the tasks sould be shared between all types of sources
    - name: get-base-image
      taskSpec:
        results:
          - name: baseImage
        steps:
          - script: | # PLACEHOLDER
              echo
              quay.io/thoth-station/s2i-custom-notebook
              > $(results.baseImage.path)
            image: alpine
    - name: build-image
      taskRef:
        name: buildah-requirements
        kind: Task
      runAfter:
        - resolve-dependencies
        - get-base-image
      workspaces:
        - name: requirements
          workspace: packages-to-install
      params:
        - name: IMAGE
          value: image-registry.openshift-image-registry.svc:5000/$(context.pipelineRun.namespace)/$(context.pipelineRun.name)
        - name: BASE_IMAGE
          value: $(tasks.get-base-image.results.baseImage)
    - name: create-image-stream
      taskRef:
        name: openshift-client
        kind: ClusterTask
      runAfter:
        - build-image
      params:
        - name: SCRIPT
          value: |
            cat <<EOM | oc apply -f -
            ---
            kind: ImageStream
            apiVersion: image.openshift.io/v1
            metadata:
              annotations:
                opendatahub.io/notebook-image-name: $(context.pipelineRun.name)
              name: $(context.pipelineRun.name)
              namespace: $(context.pipelineRun.namespace)
              labels:
                opendatahub.io/notebook-image: 'true'
            spec:
              lookupPolicy:
                local: true
              tags:
                - name: latest
            EOM
---
apiVersion: tekton.dev/v1beta1
kind: Task
metadata:
  name: buildah-requirements
spec:
  params:
    - name: BASE_IMAGE
      type: string
    - description: Reference of the image buildah will produce.
      name: IMAGE
      type: string
    - default: >-
        registry.redhat.io/rhel8/buildah@sha256:6a68ece207bc5fd8db2dd5cc2d0b53136236fb5178eb5b71eebe5d07a3c33d13
      description: The location of the buildah builder image.
      name: BUILDER_IMAGE
      type: string
    - default: vfs
      description: Set buildah storage driver
      name: STORAGE_DRIVER
      type: string
    - default: "true"
      description: >-
        Verify the TLS on the registry endpoint (for push/pull to a non-TLS
        registry)
      name: TLSVERIFY
      type: string
    - default: oci
      description: "The format of the built container, oci or docker"
      name: FORMAT
      type: string
  workspaces:
    - name: requirements
      readonly: true
      description: the list of pinned python package we install in the produced image
  volumes:
    - name: /var/lib/containers
      emptyDir: {}
  steps:
    - name: build-image
      image: $(params.BUILDER_IMAGE)
      env:
        - name: STORAGE_DRIVER
          value: $(params.STORAGE_DRIVER)
        - name: BUILDAH_FORMAT
          value: $(params.FORMAT)
      script:
        container = $(buildah from --tls-verify=$(params.TLSVERIFY) docker://$(params.BASE_IMAGE))
        buildah copy $container $(workspaces.requirements.path)/requirements-pinned.txt /tmp/
        buildah run $container -- /usr/bin/pip install -r /tmp/requirements-pinned.txt
        buildah commit $container $(params.IMAGE)
        buildah push --tls-verify=$(params.TLSVERIFY) $(params.IMAGE)
      volumeMounts:
        - name: containers
          mountPath: /var/lib/containers
---
apiVersion: tekton.dev/v1beta1
kind: Task
metadata:
  name: get-package-versions-list
spec:
  volumes:
    - name: unpinned-packages
      emptyDir:
        medium: memory
  workspaces:
    - name: pinned-packages
  params:
    - name: CNBI_PACKAGE_LIST
      type: string
  steps:
    - image: image-registry.openshift-image-registry.svc:5000/openshift/cli:latest
      script: |
        oc
        get
        cnbi
        --output=jsonpath={.spec.packageVersions[]}  # TODO: account for runtime env
        $(params.CNBI_PACKAGE_LIST)
        > /scratchspace/requirements.in
      volumeMounts:
        - name: unpinned-packages
          mountPath: /scratchspace
    - image: registry.access.redhat.com/ubi8/python-38:latest
      script: |
        #!/bin/sh -e
        pip install pip-tools # use image with pre-installed pip-tools (or other resolver)
        pip-compile --generate-hashes /scratchspace/requirements.in > $(workspace.pinned-packages.path)/requirements.txt
      volumeMounts:
        - name: unpinned-packages
          mountPath: /scratchspace
